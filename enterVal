public void exitVar_def(luluParser.Var_defContext ctx) {
        boolean isArr = false;
        if (ctx.getChild(0).getText().equals("const")) {
            if (!ctx.getText().contains(",")) {
                symbolTableTree.setCurrentScope(symbolTableTree.findScope(symbolTableTree.getRoot(), "declare"));
                if (ctx.var_val(0).ref().getText().contains("[")) { // is Array or not
                    String arr_name = ctx.var_val().get(0).ref().getChild(0).getText();
                    String arr_type = ctx.type().getText();
                    isArr = true;
                    String x = ctx.var_val(0).ref().getText();
                    Matcher m = Pattern.compile("\\[(.*?)\\]").matcher(x);
                    ArrayList<Integer> arr_width = new ArrayList<>();
                    while (m.find()) {
                        if (!isInt(m.group(1))) {
                            Error e = new Error(ctx.start.getLine(), ctx.start.getCharPositionInLine(), "dimension must be integer");
                        } else {
                            arr_width.add(Integer.parseInt(m.group(1)));
                        }
                    }

                    int c = 0;
                    for (int i = 0; i < ctx.var_val(0).ref().getText().length(); i++) {
                        if (ctx.var_val(0).ref().getText().charAt(i) == '[') {
                            c++;
                        }
                    }

                    symbolTableTree.getCurrentScope().getDataTable().addId(arr_name, arr_type, true, isArr, c, arr_width);
                } else {
                    String id_name = ctx.var_val(0).ref().getChild(0).getText();
                    String id_type = ctx.getChild(1).getText();

                    if (ctx.var_val().get(0).getText().contains("=")) {
                        Object value = ctx.var_val().get(0).expr().getText();
                        symbolTableTree.getCurrentScope().getDataTable().addId(id_name, id_type, true, value);
                    } else {
                        symbolTableTree.getCurrentScope().getDataTable().addId(id_name, id_type, true, null);
                    }

                }


            }
            else {
            	String type_id = ctx.getChild(1).getText();

				String name ;
				for(int i=2;i<ctx.getChildCount();i=i+2){

					name = ctx.getChild(i).getText();
                    System.out.println(name);
					if(name.contains("=")){
						Object value = ctx.var_val().get(0).getChild(2).getText();
						symbolTableTree.getCurrentScope().getDataTable().addId(name , type_id,true ,value);
					}
					else {
						symbolTableTree.getCurrentScope().getDataTable().addId(name,type_id,true,null);
					}

				}


			}


            if (ctx.var_val(0).getText().contains("=")) {
                System.out.println(ctx.var_val(0).expr().getText());
                //s_id.setValue(ctx.var_val(0).expr().getText());
            }
        }


    }
