grammar g;

program :        ft_dcl? ft_def+ ;
ft_dcl :         'declare' '{' ( func_dcl | type_dcl | var_def )+ '}' ;
func_dcl :       ( '(' args ')' '=' )? ID '(' (args|args_var)? ')' ';' ;
args :           type( '[' ']' )* |
                 args ',' type ( '[' ']' )*;
args_var :       type ( '[' ']' )* ID |
                 args_var ',' type ( '[' ']' )* ID;
type_dcl :       ID ';';
var_def :        ('const')?  type var_val ( ',' var_val )* ';';
var_val :        ref ( '=' expr)? ;
ft_def :         type_def | fun_def;
type_def :       'type' ID (':'ID )? '{' component+ '}';
component :      (access_modifier)? ( fun_def |var_def  );
access_modifier: 'public' | 'private' | 'protected';
fun_def :        ( '(' args_var ')' '=' )? 'function ' ID'(' (args_var)? ')' block;
block :          '{' ( var_def | stmt )* '}';
stmt :           assign ';' |
                 func_call ';' |
                 cond_stmt |
                 loop_stmt |
                 'break' ';' | 'continue' ';' | 'destruct' ( '[' ']' )* ID ';';
assign :         (<assoc=right>( var | '(' var ( ',' var )*  ')' ) '=' expr );
var :            ( ( 'this' | 'super' ) '.' )? ref ( '.' ref )*;
ref :            ID ( '(' expr ')' )* ;
expr :           '(' expr ')' |
                 MINUS expr|
                 UNARY_OP expr|
                 expr binary_op expr |
                 expr MINUS expr|

                 const_val|
                 'allocate' handle_call |
                 func_call |
                 var |
                 list| 'nil';
func_call :      ( var '.' )? handle_call |
                 'read' '(' ')' | 'write' '(' expr ')';
list :           '[' ( expr | list) ( ';' ( expr | list ) )*']';
handle_call :    ID '(' params? ')';
params :         expr | expr ',' params ;
cond_stmt :      'if' expr ( block | stmt ) ( 'else' ( block | stmt ) )?|
                 'switch' var '{' switch_body '}';
switch_body :    ( 'caseof int_const' ';' block )+( 'default' ';' block )?;
loop_stmt :      'for' ( (type)? assign )? ';' expr ';' (assign)? block |
                 'while' expr block;
type :            TYPE| ID ;
const_val :      INT_CONST | REAL_CONST | BOOL_CONST | STRING_CONST;
binary_op :      ARITH1 | ARITH2 | RELATIONAL | BITWISE_AND | LOGICAL_AND |BITWISE_OR | LOGICAL_OR;

//tokens

ID :             LETTER (LETTER | DIGIT)*;
INT_CONST:       '0'[xX]HEX|DIGIT+;
REAL_CONST:       REAL_D | REAL_H;
BOOL_CONST:      'true' | 'false';
STRING_CONST:    '\''([a-zA-Z0-9]) | '\\n' |'\\r' | '\\t' | '\\\\' | '\\\'' |'\\0'| ('x' | 'X')([a-fA-F] | DIGIT)([a-fA-F] | DIGIT);
TYPE:           'float'|'int' | 'bool'  | 'string';
ARITH1 :          '*' | '/' | '%' ;
ARITH2:           '+';
RELATIONAL :     '>'|'>='|'<'|'<='|'=='|'!=' ;
UNARY_OP:        '!' | '~';
MINUS:           '-';
BITWISE_AND:    '&' ;
BITWISE_OR:     '|';
LOGICAL_AND:     '&&';
LOGICAL_OR:     '||';



fragment LETTER :                   [a-zA-Z_@];
fragment DIGIT :                    [0-9]+;
fragment HEX:                       [a-fA-F0-9];
fragment REAL_D:                    REAL_DECIMAL_LEFT | REAL_DECIMAL_RIGHT | REAL_DECIMAL_EXP?;
fragment REAL_DECIMAL_LEFT:         (DIGIT+)'.'(DIGIT+)?;
fragment REAL_DECIMAL_RIGHT:        (DIGIT+)?'.'(DIGIT+);
fragment REAL_DECIMAL_EXP:          ([eE]([+-])? DIGIT+);
fragment REAL_H:                    '0'[xX] (REAL_HEX_LEFT | REAL_HEX_RIGHT | REAL_HEX_EXP?);
fragment REAL_HEX_LEFT:             (HEX)+'.'(HEX+)?;
fragment REAL_HEX_RIGHT:            (HEX+)?'.'(HEX+);
fragment REAL_HEX_EXP:              ([eE]([+-])? HEX+);



WHITESPACE:        [ \n\t\r]+ -> skip;
Line_CMT:          '#$' .*? ('\r')? '\n'  -> skip;
CMT:               '#(' .*? ')#' -> skip;
